d <- SPARQL(url="http://services.data.gov.uk/reference/sparql",
query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",
ns=c('time','<http://www.w3.org/2006/time#>'))
is.data.frame(d$results)
endpoint <- "http://semanticweb.cs.vu.nl/lop/sparql/"
q <-
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
}"
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
res <- SPARQL(endpoint,q,prefix)$results
res
endpoint = "http://foaf.tv/hypoid/sparql.php"
q = "PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>\nPREFIX foaf:\n<http://xmlns.com/foaf/0.1/>\nPREFIX rv:\n<http://www.wifo-ravensburg.de/rdf/semanticweb.rdf#>\nPREFIX gr:\n<http://purl.org/goodrelations/v1#>\n \nSELECT ?poi ?l ?lon ?lat ?k\nWHERE {\nGRAPH <http://www.heppresearch.com/dev/dump.rdf> {\n?poi\nvcard:geo ?l .\n  ?l vcard:longitude ?lon .\n  ?l vcard:latitude ?lat\n.\n ?poi foaf:homepage ?hp .\n?poi rv:kategorie ?k .\n\n}\n}\n"
res<-SPARQL(endpoint,q)
q <-
"SELECT *
WHERE {
?event sem:eventType ?event_type .
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
}"
res <- SPARQL(endpoint,q,ns=prefix)$results
restable <- table(res$event_type,res$region)
par(mar=c(4,10,1,1))
barplot(restable,col=rainbow(10),horiz=TRUE,las=1,cex.names=0.8)
legend("topright",rownames(restable),
cex=0.8,bty="n",fill=rainbow(10))
endpoint <- "http://live.dbpedia.org/sparql"
options <- NULL
prefix <- c("db","http://dbpedia.org/resource/")
sparql_prefix <- "PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
"
q <- paste(sparql_prefix,
'SELECT ?actor ?movie ?director ?movie_date
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:American_films> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
res <- SPARQL(endpoint,q,ns=prefix,extra=options)$results
res
q <- "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX atlas: <http://rdf.ebi.ac.uk/resource/atlas/>
PREFIX atlasterms: <http://rdf.ebi.ac.uk/terms/atlas/>
SELECT DISTINCT ?genename ?factorLabel ?tStat WHERE {
atlas:E-GEOD-8527 atlasterms:hasAnalysis ?analysis .
?analysis atlasterms:hasExpressionValue ?value .
?value atlasterms:pValue ?pvalue .
?value atlasterms:tStatistic ?tStat .
?value atlasterms:hasFactorValue ?factor .
?factor atlasterms:propertyValue ?factorLabel .
?value atlasterms:isMeasurementOf ?probe .
?probe atlasterms:dbXref ?dbXref .
?dbXref rdfs:label ?genename .
} ORDER BY ?genename limit 10000"
d <- SPARQL(url="http://www.ebi.ac.uk/rdf/services/atlas/sparql",
query=q)
d
head(d)
faithful
load("J:/Work/Statistik/Kolb/Paper/ZensusAsta1/data/ZensusImp_Asta_3Hfk.RData")
(load("J:/Work/Statistik/Kolb/Paper/ZensusAsta1/data/ZensusImp_Asta_3Hfk.RData"))
Daterg
library(xtable)
xtable(Daterg)
Daterg
Daterg2 <- unlist(Daterg)
Daterg2
Daterg[[1]]
names(Daterg)
SamplingPoints <- names(Daterg)
Daterg
Dat <- data.frame(SamplingPoints=names(Daterg))
Dat
do.call(rbind,Daterg)
do.call(rbind,round(Daterg,digits=3))
Dat <- do.call(rbind,Daterg)
Dat <- round(Dat,digits=3)
Dat
Dat <- Dat[c(3,1,2),]
Dat
rownames(Dat) <- c("SMP A","SMP B","SMP C")
Dat
xtable(Dat)
date()
date()
library(rggobi)
install.packages("rggobi")
library(rggobi)
install.packages("iplots",dep=TRUE)
library(iplots)
cyl.f <- factor(mtcars$cyl)
gear.f <- factor(mtcars$factor)
attach(mtcars)
ihist(mpg) # histogram
ibar(carb) # barchart
ipcp(mtcars[c("mpg","wt","hp")]) # parallel coordinates
imosaic(cyl.f,gear.f) # mosaic plot
plot(SAL,col="blue")
library(sp)
library("raster")
DEU4 <- getData('GADM', country='DEU', level=4)
head(DEU4@data)
SAL <- DEU4[DEU4@data$ID_1==12,]
plot(SAL)
plot(SAL,col="blue")
library(sp)
SAL$Zufall <- runif(length(SAL))
spplot(SAL,"Zufall")
library(stargazer)
install.packages("stargazer")
library(stargazer)
stargazer(attitude)
library(knitr)
library(knitr)
kable(head(iris), format = "latex")
date()
require("RPostgreSQL")
install.packages("RPostgreSQL")
require("RPostgreSQL")
pw <- {
"new_user_password"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "openpg", password = pw)
pw <- {
"PAsswort82"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "cartable",
host = "localhost", port = 5432,
user = "postgres", password = pw)
dbExistsTable(con, "cartable")
dbExistsTable(con, "tab1")
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
rm(mtcars)
dbWriteTable(con, "tab1",
value = df, append = TRUE, row.names = FALSE)
generator <- read.csv("https://raw.githubusercontent.com/Japhilko/GeoData/master/data/Deutschland_generator.csv")
head(generator)
colnames(generator)
str(X)
attach(generator)
str(X)
df <- data.frame(generator,
row.names = NULL)
dbWriteTable(con, "tab1",
value = df, append = TRUE, row.names = FALSE)
install.packages("pollstR")
gesis_gc <- geocode("Gesis Mannheim")
library(ggmap)
gesis_gc <- geocode("Gesis Mannheim")
library(raster)
projection(gesis_gc)
gesis_gc
install.packages("rmongodb")
library(rmongodb)
install.packages("visNetwork")
library(visNetwork)
sex <- c("m","w","m")
location <- c("Mannheim","Mannheim","Stuttgart")
HHdat <- data.frame(sex,location)
HHagg <- with(HHdat,data.frame(table(sex,location)))
HHdat <- data.frame(sex,location)
HHagg <- with(HHdat,data.frame(table(sex,location)))
HHagg
devtools::install_github("Stan125/GREA")
13*3800
13*3800*2
90000*0.05
date()
setwd("J:/Work/Statistik/Kolb/Workshops/2011/EinfÃ¼hrung in die empirische Sozialforschung mit R/Kapitel6_Multivariat")
date()
Auto.frame <- t(read.csv("RinneBSP.csv",header=F))
rownames(Auto.frame) <- 1:25
colnames(Auto.frame) <- paste("X",1:7,sep="")
Auto.frame
Auto.cor<-cor(Auto.frame)
round(Auto.cor,digits=4)
# Die korrelationen in einem Levelplot darstellen:
library(lattice)
panelLevel<-function(x,y,z,...){
panel.levelplot(x=x,y=y,z=z,...)
cat(str(z))
for(i in 1:length(unique(y))){
panel.text(x=x,y=y,labels=round(z,digits=2),col="white",cex=1.5)
}
}
levelplot(round(Auto.cor,digits=2),col.regions=colorRampPalette(c("royalblue","yellow","orange", "chocolate1")),xlab="",ylab="",panel=panelLevel,cex=2)
(load(url("http://dmirman.github.io/FAex.Rdata")))
kable(head(loadings))
library(knitr)
kable(head(loadings))
?princomp
fit <- princomp(USArrests, cor=TRUE)
fit
kable(head(USArrests))
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
setwd("J:/Work/Statistik/Kolb/Paper/SpatialRbook/data")
(load("berplz.RData"))
head(berplz@data)
USArrests
dat <- berplz@data[,-c(1:3)]
rownames(dat) <- berplz@data$PLZ99
fit <- princomp(dat, cor=TRUE)
summary(fit)
biplot(fit)
(load("data/berplz.RData"))
library(psych)
install.packages("psych")
cor(dat)
kable(cor(dat))
osm_pca <- prcomp(dat)
print(osm_pca)
plot(dat)
summary(osm_pca)
a1 <- osm_pca$rotation[,1]
a1
hm <- as.matrix(dat)
drop(hm%*% osm_pca$rotation[,1])
plot(osm_pca)
biplot(osm_pca, col = c("gray", "black"))
install.packages("WikidataR")
item <- get_item(id = 1)
library(WikidataR)
item <- get_item(id = 1)
item
item$claims
first_claim <- get_property(id = names(item$claims)[1])
first_claim <- get_property(id = names(item$claims)[1])
zika <- find_item("Zika")
zika
all_zika <- find_item("Zika")
first_zika <- get_item(all_zika[[1]]$id)
first_zika
summary(first_zika)
first_zika$sitelinks
library(maps)
data(world.cities)
kable(head(world.cities))
world.cities$country.etc
dcities <- world.cities[world.cities$country.etc=="Germany",]
kable(head(dcities))
titles <- dcities$name
titles
norw(dcities)
nrow(dcities)
dcities$pop
min(dcities$pop)
which.min(dcities$pop)
dcities[88,]
dcitiesb <- dcities[dcities$pop>100000,]
nrow(dcitiesb)
titles <- dcitiesb$name
titles
titles <- agrep(" ","_",titles)
titles <- gsub(" ","_",titles)
titles
articles <- character(length(titles))
for (i in 1:length(titles)){
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
}
library("stringi")
library("tm")
library("FactoMineR")
articles <- character(length(titles))
for (i in 1:length(titles)){
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
}
wiki <- "http://de.wikipedia.org/wiki/"
titles <- dcitiesb$name
titles <- gsub(" ","_",titles)
for (i in 1:length(titles)){
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
cat(titles[i],"\n")
}
titles[i]
i
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
wiki <- "http://en.wikipedia.org/wiki/"
titles <- dcitiesb$name
titles <- gsub(" ","_",titles)
articles <- character(length(titles))
for (i in 1:length(titles)){
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
cat(titles[i],"\n")
}
getwd()
setwd("C:/Users/kolbjp/Documents/GitHub/DataAnalysis/UseCases")
save("data/GermanCities_Wikipedia.RData")
save(articles,"data/GermanCities_Wikipedia.RData")
save(articles,file="data/GermanCities_Wikipedia.RData")
docs <- Corpus(VectorSource(articles))
docs2 <- tm_map(docs, function(x) stri_replace_all_regex(x, "<.+?>", " "))
docs3 <- tm_map(docs2, function(x) stri_replace_all_fixed(x, "\t", " "))
docs4 <- tm_map(docs3, PlainTextDocument)
docs5 <- tm_map(docs4, stripWhitespace)
docs6 <- tm_map(docs5, removeWords, stopwords("english"))
docs7 <- tm_map(docs6, removePunctuation)
docs8 <- tm_map(docs7, tolower)
docs8 <- tm_map(docs8, PlainTextDocument)
dtm <- DocumentTermMatrix(docs8)
dtm2 <- as.matrix(dtm)
frequency <- colSums(dtm2)
frequency <- sort(frequency, decreasing=TRUE)
words <- frequency[frequency>20]
s <- dtm2[1,which(colnames(dtm2) %in% names(words))]
for(i in 2:nrow(dtm2)){
s <- cbind(s,dtm2[i,which(colnames(dtm2) %in% names(words))])
}
colnames(s) <- titles
PCA(s)
s0 <- s/apply(s,1,sd)
h <- hclust(dist(t(s0)), method = "ward")
plot(h, labels = titles, sub = "")
save(dtm,file="data/GermanCities_Wikipedia_dtm.RData")
load("data/GermanCities_Wikipedia_dtm.RData")
h
h$labels
h$order
h$dist.method
h$height
h
cutree(h, k = 1:5)
cutree(h, k = 2)
cutree(h, k = 1:10)
ct10 <- cutree(h, k = 10)
ct10
table(ct10)
tapply(names(ct10),ct10,function(x)x)
ct10 <- cutree(h, k = 8)
tapply(names(ct10),ct10,function(x)x)
ct8h <- cutree(h, h = 8)
tapply(names(ct8h),ct8h,function(x)x)
ct8h
hcities <- hclust(dist(t(s0)), method = "ward")
ct8h <- cutree(hcities, h = 8)
ct8h
ct8h <- cutree(hcities, h = 4)
ct8h
pvrect(hcities, alpha=.95)
library(pvclust)
install.packages("pvclust")
library(pvclust)
pvrect(hcities, alpha=.95)
hcities
fit <- pvclust(t(s0), method.hclust="ward",
method.dist="euclidean")
fit <- pvclust(dist(t(s0)), method.hclust="ward",
method.dist="euclidean")
cutree(hcities, k = 1:10)
tapply(names(ct8),ct8,function(x)x)
ct8 <- cutree(hcities, k = 8)
tapply(names(ct8),ct8,function(x)x)
library(dendextend)
install.packages("dendextend")
library(dendextend)
dend <- as.dendrogram(hc_iris)
dend <- as.dendrogram(hcities)
dend
plot(dend)
?rotate
dend <- rotate(dend, 1:150)
d_iris <- dist(iris2) # method="man" # is a bit better
hc_iris <- hclust(d_iris, method = "complete")
iris_species <- rev(levels(iris[,5]))
plot(dend,horiz=F)
plot(dend,horiz=T)
dend <- hang.dendrogram(dend,hang_height=0.1)
plot(dend,horiz=T)
dend <- hang.dendrogram(dend,hang_height=0.4)
plot(dend,horiz=T)
dend <- as.dendrogram(hcities)
dend <- hang.dendrogram(dend,hang_height=0.4)
plot(dend,horiz=T)
dend <- as.dendrogram(hcities)
dend <- hang.dendrogram(dend,hang_height=0.01)
plot(dend,horiz=T)
dend <- as.dendrogram(hcities)
dend <- hang.dendrogram(dend,hang_height=10)
plot(dend,horiz=T)
dend <- set(dend, "labels_cex", 0.5)
plot(dend,horiz=T)
dend <- set(dend, "labels_cex", 0.3)
plot(dend,horiz=F)
dend <- set(dend, "labels_cex", 0.5)
plot(dend,horiz=F)
install.packages("circlize")
par(mar = rep(0,4))
circlize_dendrogram(dend)
gplots::heatmap.2(dist(t(s0)),
main = "Heatmap for the Iris data set",
srtCol = 20,
dendrogram = "row",
Rowv = dend,
Colv = "NA", # this to make sure the columns are not ordered
trace="none",
margins =c(5,0.1),
key.xlab = "Cm",
denscol = "grey",
density.info = "density",
RowSideColors = rev(labels_colors(dend)), # to add nice colored strips
col = some_col_func
)
some_col_func <- function(n) rev(colorspace::heat_hcl(n, c = c(80, 30), l = c(30, 90), power = c(1/5, 1.5)))
gplots::heatmap.2(dist(t(s0)),
main = "Heatmap for the Iris data set",
srtCol = 20,
dendrogram = "row",
Rowv = dend,
Colv = "NA", # this to make sure the columns are not ordered
trace="none",
margins =c(5,0.1),
key.xlab = "Cm",
denscol = "grey",
density.info = "density",
RowSideColors = rev(labels_colors(dend)), # to add nice colored strips
col = some_col_func
)
gplots::heatmap.2(as.matrix(dist(t(s0))),
main = "Heatmap for the Iris data set",
srtCol = 20,
dendrogram = "row",
Rowv = dend,
Colv = "NA", # this to make sure the columns are not ordered
trace="none",
margins =c(5,0.1),
key.xlab = "Cm",
denscol = "grey",
density.info = "density",
RowSideColors = rev(labels_colors(dend)), # to add nice colored strips
col = some_col_func
)
hclust_methods <- c("ward.D", "single", "complete", "average", "mcquitty",
"median", "centroid", "ward.D2")
hclust_methods <- c("ward.D", "single", "complete", "average", "mcquitty",
"median", "centroid", "ward.D2")
wcit_dendlist <- dendlist()
for(i in seq_along(hclust_methods)) {
hc_cities <- hclust(dist(t(s0)), method = hclust_methods[i])
wcit_dendlist <- dendlist(wcit_dendlist, as.dendrogram(hc_cities))
}
names(wcit_dendlist) <- hclust_methods
wcit_dendlist
wcit_dendlist_cor <- cor.dendlist(wcit_dendlist)
wcit_dendlist_cor
corrplot::corrplot(wcit_dendlist_cor, "pie", "lower")
install.packages("corrplot")
corrplot::corrplot(wcit_dendlist_cor, "pie", "lower")
wcit_dendlist_cor_spearman <- cor.dendlist(wcit_dendlist, method_coef = "spearman")
corrplot::corrplot(wcit_dendlist_cor_spearman, "pie", "lower")
wcit_dendlist %>% dendlist(which = c(1,8)) %>% ladderize %>%
set("branches_k_color", k=3) %>%
tanglegram(faster = TRUE) #
wcit_dendlist %>% dendlist(which = c(1,4)) %>% ladderize %>%
set("rank_branches") %>%
tanglegram(common_subtrees_color_branches = TRUE)
ct100h <- cutree(hcities, h = 100)
ct100h
table(ct100h)
ct50h <- cutree(hcities, h = 50)
table(ct50h)
ct90h <- cutree(hcities, h = 90)
table(ct90h)
ct110h <- cutree(hcities, h = 110)
table(ct110h)
?hclust
ct110h
table(ct110h)
ct110h <- cutree(hcities, h = 110)
ct110h <- cutree(hcities, h = 120)
table(ct110h)
ct110h <- cutree(hcities, h = 105)
table(ct110h)
ct110h <- cutree(hcities, h = 130)
table(ct110h)
ct110h <- cutree(hcities, h = 150)
table(ct110h)
ct110h <- cutree(hcities, h = 140)
table(ct110h)
ct110h <- cutree(hcities, h = 135)
table(ct110h)
ct110h <- cutree(hcities, h = 140)
table(ct110h)
ct140h <- cutree(hcities, h = 140)
table(ct140h)
tapply(names(ct140h),ct140h,unique)
