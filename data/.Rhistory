library(geosmdata2)
library(XML)
library(rgdal)
main.path <- "J:/Work/Statistik/Kolb/Paper/UseOSMdata/"
data.path <- paste(main.path,"data/XML/",sep="")
map.path <- "D:/Daten/Daten/GeoDaten"
place <- "Mannheim"
objL <- c("school","car_sharing","fuel","parking","bank","dentist",
"restaurant","pub","fast_food","cafe","biergarten","bar",
"playground","bakery")
seldom <- c("bbq","clinic")
infoL <- list()
res <- vector()
setwd(data.path)
# i<-1
for (i in 1:length(objL)){
obj <- objL[i]
xml1 <- xmlParse(paste(place,"_",obj,".xml",sep=""))
erg <- extract_info_op(OSM.Data=xml1,value=objL[i])
infoL[[i]] <- erg
res[i] <- ifelse(is.null(erg),0,nrow(infoL[[i]]))
}
meta <- data.frame(objL,nr=res)
setwd(map.path)
PLZ <- readOGR ("post_pl.shp","post_pl")
MA <- PLZ[PLZ@data$PLZORT99=="Mannheim",]
polygonList <- list()
polygonList <- list()
for ( i in 1:length(MA)){
polygonList[[i]] <- MA@polygons[[i]]@Polygons[[i]]@coords
}
polygonList <- list()
for ( i in 1:length(MA)){
polygonList[[i]] <- MA@polygons[[i]]@Polygons[[1]]@coords
}
ErgDat <- array(0,dim=c(length(MA),nrow(meta)))
for ( j in 1: length(MA)){
for (i in 1: nrow(meta)){
drin <- point.in.polygon(infoL[[i]]$lon,infoL[[i]]$lat,polygonList[[j]][,1],polygonList[[j]][,2])
ErgDat[j,i] <- sum(drin)
}
}
ErgDat
d <- dist(ErgDat)
d
fit <- cmdscale(d,eig=TRUE, k=2)
fit
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(mydata), cex=.7)
x <- fit$points[,1]
fit$points[,1]
fit$points[,2]
PLZ@data$PLZ99
row.names(ErgDat) <- MA@data$PLZORT99
meta$objL
col.names(ErgDat) <- as.character(meta$objL)
rownames(ErgDat) <- MA@data$PLZORT99
colnames(ErgDat) <- as.character(meta$objL)
d <- dist(ErgDat)
fit <- cmdscale(d,eig=TRUE, k=2)
# http://www.statmethods.net/advstats/mds.html
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(mydata), cex=.7)
text(x, y, labels = row.names(ErgDat), cex=.7)
rownames(ErgDat) <- MA@data$PLZ99
colnames(ErgDat) <- as.character(meta$objL)
d <- dist(ErgDat)
fit <- cmdscale(d,eig=TRUE, k=2)
# http://www.statmethods.net/advstats/mds.html
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(ErgDat), cex=.7)
dat <- ErgDat
library(devtools)
install_github("jjallaire/revealjs")
git.path <- "C:/Users/kolbjp/Documents/GitHub/DataAnalysis/data"
setwd(git.path)
save(dat,file="Mannheim_OSM2ZIP.RData")
load("https://github.com/Japhilko/DataAnalysis/raw/master/data/Mannheim_OSM2ZIP.RData")
load("https://github.com/Japhilko/DataAnalysis/raw/master/data/Mannheim_OSM2ZIP.RData")
load("C:/Users/kolbjp/Documents/GitHub/DataAnalysis/data/Mannheim_OSM2ZIP.RData")
save(dat,file="MannheimOSM2ZIP.RData")
load("D:/Temp/MannheimOSM2ZIP.RData")
load("https://github.com/Japhilko/DataAnalysis/raw/master/data/MannheimOSM2ZIP.RData")
?download.file
getwd()
setwd(data.path)
download.file("https://github.com/Japhilko/DataAnalysis/raw/master/data/MannheimOSM2ZIP.RData")
download.file("https://github.com/Japhilko/DataAnalysis/raw/master/data/MannheimOSM2ZIP.RData",destfile="dat.RData")
load("dat.RData")
kable(head(dat))
library(knitr)
kable(head(dat))
setwd("C:/Users/kolbjp/Documents/GitHub/DataAnalysis/data")
load("Mannheim_OSM2ZIP.RData")
(load("Mannheim_OSM2ZIP.RData"))
library(rgdal)
PLZ <- readOGR ("post_pl.shp","post_pl")
date()
place <- "Dresden"
boundaryDD <- xmlParse("http://www.overpass-api.de/api/interpreter?data=
area[name=\"Dresden\"];way(area)
[boundary=administrative];out;")
boundaryDD
boundaryDD2 <- xmlParse("http://www.overpass-api.de/api/interpreter?data=
area[name=\"Dresden\"];way(area)
[boundary=administrative];out geom;")
boundaryDD2
library(shapefiles)
install.packages("shapefiles")
library(shapefiles)
?sp:::Line
l1 = cbind(c(1,2,3),c(3,2,2))
l1a = cbind(l1[,1]+.05,l1[,2]+.05)
l2 = cbind(c(1,2,3),c(1,1.5,1))
Sl1 = Line(l1)
Sl1a = Line(l1a)
Sl2 = Line(l2)
S1 = Lines(list(Sl1, Sl1a), ID="a")
S2 = Lines(list(Sl2), ID="b")
S2
l1
Sl1
install.packages("plotKML")
library(sp)
?SpatialPolygons
x = c(0.5, 0.5, 1.2, 1.5)
y = c(1.5, 0.5, 0.5, 0.5)
xy = cbind(x,y)
dimnames(xy)[[1]] = c("a", "b", "c", "d")
pts = SpatialPoints(xy)
xpol = c(0,1,1,0,0)
ypol = c(0,0,1,1,0)
pol = SpatialPolygons(list(
Polygons(list(Polygon(cbind(xpol-1.05,ypol))), ID="x1"),
Polygons(list(Polygon(cbind(xpol,ypol))), ID="x2"),
Polygons(list(Polygon(cbind(xpol,ypol-1.05))), ID="x3"),
Polygons(list(Polygon(cbind(xpol+1.05,ypol))), ID="x4"),
Polygons(list(Polygon(cbind(xpol+.4, ypol+.1))), ID="x5")
))
pol
OSM.Data=boundaryDD2
xpathApply(OSM.Data,paste("//",Element,"[@id = ",node_id[i],"]//nd/attribute::*",sep=""))
library(geosmdata2)
data(osm_df)
osm_df$Element2
Element="area"
xpathApply(OSM.Data,paste("//",Element,"[@id = ",node_id[i],"]//nd/attribute::*",sep=""))
info <- extract_position_op(boundaryDD2,"administrative")
boundaryDD2 <- xmlParse("http://www.overpass-api.de/api/interpreter?data=
area[name=\"Dresden\"];way(area)
[boundary=administrative];out geom;")
boundaryDD2
OSM.Data <- boundaryDD2
node_id<- xpathApply(OSM.Data,"//tag[@v= 'administrative']/parent::way/@ nd")
node_id
node_id<- xpathApply(OSM.Data,"//.")
node_id
xpathApply(OSM.Data,"//child::nd/./@ref")
xpathApply(OSM.Data,"//child")
xmlfile <- boundaryDD2
xmltop = xmlRoot(xmlfile)
print(xmltop)[1:2]
plantcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
plantcat
plantcat_df <- data.frame(t(plantcat),row.names=NULL)
plantcat_df[1:5,1:4]
xmlfile <- boundaryDD2
info <- xmlSApply(xmlfile, xmlValue)
xmlfile <- xmlRoot(boundaryDD2)
info <- xmlSApply(xmlfile, xmlValue)
info
boundaryDD2
node_id <- "361509990"
info <- xpathApply(OSM.Data,paste("//",Element,"[@id = ",node_id,"]//nd/attribute::*",sep="")
info <- xpathApply(OSM.Data,paste("//",Element,"[@id = ",node_id,"]//nd/attribute::*",sep=""))
info
OSM.Data <- xmlRoot(boundaryDD2)
info <- xpathApply(OSM.Data,paste("//",Element,"[@id = ",node_id,"]//nd/attribute::*",sep=""))
info
names <- c("Function","Description","xmlName()","name of the node","xmlSize()","number of subnodes","xmlAttrs()","named character vector of all attributes","xmlGetAttr()","
value of a single attribute","xmlValue()","contents of a leaf node","xmlParent()","
name of parent node","xmlAncestors()","name of ancestor nodes","getSibling()","
siblings to the right or to the left","xmlNamespace()","the namespace (if there’s one)")
tab <- aray(names,dim=c(2))
tab <- array(names,dim=c(2))
tab
tab <- array(names,dim=c(2,length(names)/2))
tab
tab <- array(names,dim=c(length(names)/2),2)
tab
length(names)
tab <- array(names,dim=c(length(names)/2,2))
tab
names <- c("Function","Description","xmlName()","name of the node","xmlSize()","number of subnodes","xmlAttrs()","named character vector of all attributes","xmlGetAttr()","value of a single attribute","xmlValue()","contents of a leaf node","xmlParent()","name of parent node","xmlAncestors()","name of ancestor nodes","getSibling()","siblings to the right or to the left","xmlNamespace()","the namespace (if there’s one)")
tab <- array(names,dim=c(length(names)/2,2))
tab
tab <- array(names,dim=c(2,length(names)/2))
tab
tab <- t(array(names,dim=c(2,length(names)/2)))
tab
kable(tab)
install.packages("tmap")
install.packages("chroplethr")
library(tmap)
citation(tmap)
?citation
citation(chroplethr)
# install.packages("choroplethr")
install.packages("choroplethr")
version()
session.info()
Session.info()
sessionInfo()
library(tmap)
qtm(Europe)
Europe
data(Europe)
(data(Europe))
Europe
Europe@data
library(knitr)
tm_shape(Europe[Europe$continent=="Europe",]) +
tm_fill("part", thres.poly = 0) +
tm_facets("name", free.coords=TRUE, drop.shapes=TRUE) +
tm_layout(legend.show = FALSE, title.position = c("center", "center"), title.size = 2)
